@startuml
title 服务端启动
'https://plantuml.com/component-diagram'
boundary ServerBootstrap  as sb
boundary NioEventLoop as nel
entity NioServerSocketChannel as nssc
entity NioMessageUnsafe as nms
control ChannelPipeline as cp
control ChannelHandlerContext as chc
entity ChannelHandler as handler

group initAndRegister
    group init
        sb -> nssc: 创建java.ServerSocketChannel，并封装至netty.channel
        nssc -> nssc : 构造方法中创建pipeline、unsafe
        nssc --> sb
        sb -> sb : init：主要是配置及属性填充
        sb -> cp : addLast，添加一个 ChannelInitializer,其中包含配置的handler，以及 ServerBootstrapAcceptor
    end
    group register
        sb -> nel : registor,将初始化的channel注册到EventLoop
        nel -> nms : channel().unsafe().register, 绑定channel与eventLoop
        nms --> nel : 提交register任务到线程池异步执行
        group doRegistre
            nms -> nms : doRegistre:将java.channel 注册到selector，不对任何事件感兴趣
            nms -> nms : 标识已注册
            nms -> cp : invokeHandlerAddedIfNeeded,激活handler，执行Initialier
            cp -> chc : callHandlerAdded,设置handler状态为已添加,激活handler
            chc -> handler : handlerAdded
            opt handler is ChannelInitializer
                handler -> handler : initChannel,执行完成后将Initializer移除出链表
                note left
                    如果是NioServerScoketChannel，添加 ServerBootstrapAcceptor 会是一个task提交到当前线程池稍后执行
                end note
                handler --> nel : pipeline.addLast(new ServerBootstrapAcceptor()),提交匿名任务，当前eventloop正在执行registor，入队等待执行
            end
            nms -> cp : fireChannelRegistered
        end
    end

    group doBind0
        sb --> nel : 提交bind事件异步执行,主要操作是java.channel 绑定地址
        group 执行bind
            nssc -> cp : bind
            cp -> chc : bind
            chc -> chc : 从tail开始执行，在head中调用unsafe
            chc -> nms : bind
            nms ->  nssc: java.channel 绑定address
        end
        nms --> nel : 提交 fireChannelActive 异步执行
        group 执行fireChannelActive
            cp -> chc : invokeChannelActive,从head开始执行
            chc ->chc : fireChannelActive
            chc -> chc : head.readIfIsAutoRead
            chc -> nssc: read
            nssc -> cp : read
            cp -> chc:read,从tail开始执行
            chc -> nms:beginRead,在HeadContext中
            nms -> nssc : doBeginRead 注册OP_ACCEPT 事件到selectionKey
        end
    end
end

newpage 服务端处理客户端连接
entity NioSocketChannel as nsc

nel -> nel : run,执行select，监听OP_ACCEPT
nel -> nssc : ch.unsafe().read() 处理连接事件
nssc -> nssc : doReadMessages,构建NioSocketChannel,类似于创建ServerSocketChannel过程
nssc -> cp : fireChannelRead
cp -> chc: invokeChannelRead
chc -> handler : channelRead
handler -> handler : ServerBootstrapAcceptor,注册NioSocketChannel,\n参考serverChannel的注册流程
note left
1. 感兴趣的事件是OP_READ
2. 在注册方法中直接调用active
end note


@enduml

@startuml
title NioEventLoop 执行过程
start
:NioEventLoop初始化;
note
selector在构造方法中初始化
end note
:调用者提交task,任务入队;
note
nio.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
end note
if (线程已启动?) is (no) then
  :cas设置线程启动状态;
  :创建并启动线程;
  :将loop中的线程变量赋值为新启动线程;
  :执行SingleThreadEventExecutor.this.run()方法;
  note
    run方法在NioEventLoop中覆写,while-true执行
  end note
endif
:notify线程执行;
:run方法执行;
while (true)
  :计算selector策略;
  note
  1. 查看当前线程队列中是否有任务
  2. 没有的话返回策略SELECT=-1
  3. 否则返回 selector.selectNow()
  end note
  if (策略为SELECT?) is (yes) then
    if (调度队列中有任务?) is (yes) then
      :selector.select(timeout);
    else (no)
      :selector.select();
    endif
  endif
  if (IO计数>0?) is (yes) then
    :处理IO事件;
  endif
   note
    1. IO计数是select策略的数字或select
    2. 处理read、write、accept、connect
   end note
  :运行队列中任务;
  note
  1. 将调度队列中到期任务提取到线程队列中
  2. 执行线程队列中任务
  3. 执行tailQueue中的任务
  end note
endwhile
stop
@enduml


@startuml
title channel read

boundary NioEventLoop as nel
boundary Selector
entity NioByteUnsafe as unsafe
entity NioSocketChannel as nssc
entity RecvByteBufAllocator.Handle as allocHandle
control ChannelPipeline as cp
control ChannelHandlerContext as chc
entity ChannelInboundHandler as handler
entity javaSocketChannel as javaCh


nel -> Selector:selectedKeys
group processSelectedKey
Selector --> nel : 响应准备好的key
nel -> nssc:unsafe
nssc --> nel : 响应chann绑定的unsafe
nel -> unsafe:read
end group
unsafe --> unsafe:recvBufAllocHandle,创建接收处理器allocHandle
loop allocHandle.continueReading()
unsafe -> allocHandle:allocate
allocHandle --> unsafe:创建接收数据的ByteBuf
unsafe -> nssc : doReadBytes,入参是接收数据的ByteBuf
nssc -> javaCh : read
javaCh --> nssc: 将读取到的字节信息写入到指定的ByteBuf中
alt 本次读取的字节数 <=0
unsafe -> unsafe:释放接收数据的ByteBuf
    alt 本次读取的字节数 < 0
        unsafe -> unsafe: 表示对方发送的close事件，设置 close=true
    end
end
unsafe -> cp : fireChannelRead
cp -> chc : invokeChannelRead
chc -> handler :(head~tail).channelRead
note right
读取字节信息后在handler中进行转码，主要是协议解析、反序列化、拆包、粘包等
end note
handler -> handler : ByteToMessageDecoder.decode
note over handler
ByteToMessageDecoder 子类基于它可以很方便的实现拆包与粘包的操作，每个channel都单独绑定一个实例，带状态的Cumulator
使用Cumulator(累加器)，将每次读取进来的bytebuf进行合并，合并完后尝试decode，如果可以解析出所需的对象则调用下一个channelHandler进行业务处理，否则不做任何操作
decode操作根据协议读取指定的大小的字节数、或者读完以后直接反序列化成对象等
end note


end loop
unsafe -> cp : fireChannelReadComplete
note right
驱动hanndler处理ChannelReadComplete
end note

alt close == true
    group closeOnRead
        alt 允许半关
             unsafe -> nssc : shutdownInput
             nssc -> javaCh : shutdownInput
             unsafe -> cp:fireUserEventTriggered(ChannelInputShutdownEvent.INSTANCE)
        else 否则
            unsafe -> nssc : close
        end
    end
end


@enduml



@startuml
title channel write

entity NioSocketChannel as nssc
control ChannelPipeline as cp
control ChannelHandlerContext as chc
entity ChannelOutboundHandler as handler
entity javaSocketChannel as javaCh
entity AbstractUnsafe as unsafe
entity ChannelOutboundBuffer as ob
boundary NioEventLoop as nel
note right of ob
写信息主要是围绕buffer来进行的，buffer中维护了两个队列：unflushedEntry、flushedEntry
写分三步
    1. write 将ByteBuf对象添加到unflushedEntry
    2. flush 将unflushedEntry中的对象转移到flushedEntry
    3. 调用java.SocketChannel 发送信息
end note


nssc -> cp : writeAndFlush
cp -> chc : writeAndFlush
chc -> chc : invokeWriteAndFlush
chc -> chc : invokeWrite0
chc -> handler : (tail~head).write
note right
在handler中对发送的消息进行处理，主要将对象进行序列化、协议补充等
eg:MessageToByteEncoder
end note
handler -> unsafe : write
note over handler
在HeadContext中调用unsafe
end note
unsafe -> nssc : filterOutboundMessage
nssc --> unsafe : 只返回ByteBu/FileRegionf对象，如果不是direct，包装成
unsafe -> ob: addMessage
note right
1. 添加到unflushed队尾，大小为 size只是暂存，
2. 计算当前buffer中totalPendingSize+=size
3. totalPendingSize > WriteBufferHighWaterMark(buffer写入高水位)，如果条件满足该buffer将不可写入，维护unwritable
end note
chc -> chc : invokeFlush0
chc -> handler : (tail~head).flush
handler -> unsafe :flush
note over handler
在HeadContext中调用unsafe
end note
unsafe -> ob:addFlush
note right
1. 将unflushed队列中的元素转移到flushed队列中，并且将unflushed=null
2. 转移过程中如果有的节点取消
    1. 减去取消节点的size， totalPendingSize-=size
    2. totalPendingSize < WriteBufferLowWaterMark 小于低水位，buffer可写入，维护unwritable
end note
unsafe -> unsafe: flush0
note left
inFlush0 维护状态，避免重复进入
end note
unsafe -> nssc : doWrite

loop  循环发送buffer中的信息，条件：writeSpinCount > 0
note left
 方法里有自旋次数writeSpinCount
 主要是控制每次写不要占用I/O线程太多时间
end note
alt buffer为空
nssc -> nssc :clearOpWrite,清除OP_WRITE
return 结束方法
end
nssc -> ob : nioBuffers(int maxCount, long maxBytes)
ob --> nssc: 将buffer中的部分Bytebuf转换成java.ByteBuffer，限制条件是两个max
nssc -> ob : nioBufferCount
ob --> nssc : 有多少个byteBuffer可以传输，与nioBuffers对应，代表从buffer中读取了多少个ByteBuffer
nssc -> javaCh : write
javaCh --> nssc : 响应实际发送的字节,localWrittenBytes
alt localWrittenBytes<=0，走到这里说明有数据需要发送，但是实际没有发送
 nssc -> nssc :incompleteWrite ,设置OP_WRITE
 return  结束方法调用
end
nssc -> nssc:adjustMaxBytesPerGatheringWrite,调整每次发送的字节数，主要根据操作系统的能力调节
nssc -> ob : removeBytes，释放已发送字节
note right
 0. flushed 指向下个节点
 1.减去已发送节点的size， totalPendingSize-=size
 2. totalPendingSize < WriteBufferLowWaterMark 小于低水位，buffer可写入，维护unwritable
end note
nssc -> nssc : --writeSpinCount，自旋次数减少
end loop
nssc -> nssc :incompleteWrite,writeSpinCount <0,设置OP_WRITE

nel -> selector : select
selector --> nel : 监听到OP_WRITE
nel -> unsafe:forceFlush
unsafe -> unsafe:flush0,看上面的flush流程就行
@enduml






